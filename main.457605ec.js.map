{"version":3,"sources":["scripts/main.js"],"names":["board","gameField","document","querySelector","button","gameScore","messageStart","messageLose","messageWin","cellsInRow","scoreCount","startGame","innerText","placeTiles","hasEmptyTile","randomRow","Math","floor","random","randomCol","numb","setCells","i","includes","loseGame","j","currentCell","rows","cells","num","classList","value","add","remove","replace","removeEmptyTiles","row","filter","slide","hasEmptyCells","canMerge","length","newRow","push","slideLeft","slideRight","reverse","slideUp","col","slideDown","compareBoards","a","b","addEventListener","e","preventDefault","pastBoard","JSON","parse","stringify","code"],"mappings":"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","file":"main.457605ec.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('tbody');\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nconst cellsInRow = 4;\nlet scoreCount = 0;\nlet board;\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  startGame();\n});\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  scoreCount = 0;\n  gameScore.innerText = scoreCount;\n\n  placeTiles();\n  placeTiles();\n}\n\nfunction placeTiles() {\n  while (hasEmptyTile()) {\n    const randomRow = Math.floor((Math.random() * cellsInRow));\n    const randomCol = Math.floor((Math.random() * cellsInRow));\n\n    if (board[randomRow][randomCol] === 0) {\n      const numb = Math.random() < 0.8 ? 2 : 4;\n\n      board[randomRow][randomCol] = numb;\n      break;\n    }\n  }\n\n  setCells();\n}\n\nfunction hasEmptyTile() {\n  for (let i = 0; i < cellsInRow; i++) {\n    if (board[i].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction loseGame() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let i = 0; i < cellsInRow; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      if (board[i][j] === board[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < cellsInRow - 1; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      if (board[i][j] === board[i + 1][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction setCells() {\n  for (let i = 0; i < cellsInRow; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      const currentCell = gameField.rows[i].cells[j];\n      const num = board[i][j];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field-cell--${num}`);\n      }\n\n      if (num === 2048) {\n        messageWin.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (loseGame()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction removeEmptyTiles(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  const hasEmptyCells = hasEmptyTile();\n\n  let canMerge = false;\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      canMerge = true;\n      break;\n    }\n  }\n\n  if (!hasEmptyCells && !canMerge) {\n    return row;\n  }\n\n  let newRow = removeEmptyTiles(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      scoreCount += newRow[i];\n\n      gameScore.innerText = scoreCount;\n    }\n  }\n\n  newRow = removeEmptyTiles(newRow);\n\n  while (newRow.length < cellsInRow) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let row = board[i];\n\n    row = slide(row);\n    board[i] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let row = board[i].reverse();\n\n    row = slide(row).reverse();\n    board[i] = row;\n  }\n}\n\nfunction slideUp() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let col = [board[0][i], board[1][i], board[2][i], board[3][i]];\n\n    col = slide(col);\n\n    for (let j = 0; j < cellsInRow; j++) {\n      board[j][i] = col[j];\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let col = [board[0][i], board[1][i], board[2][i], board[3][i]].reverse();\n\n    col = slide(col).reverse();\n\n    for (let j = 0; j < cellsInRow; j++) {\n      board[j][i] = col[j];\n    }\n  }\n}\n\nfunction compareBoards(a, b) {\n  for (let i = 0; i < cellsInRow; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      if (a[i][j] !== b[i][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  const pastBoard = JSON.parse(JSON.stringify(board));\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n\n  if (!compareBoards(pastBoard, board)) {\n    placeTiles();\n  }\n\n  setCells();\n});\n"]}